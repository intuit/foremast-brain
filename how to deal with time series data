{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import wavefront_api_client as wave_api\n",
    "import time\n",
    "import datetime as dt\n",
    "import re\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.append('../')\n",
    "\n",
    "from wavefront.nbutils import formatData,retrieveClient,convertDT,executeQuery\n",
    "\n",
    "from graph.graphutils import showGraph\n",
    "\n",
    "## Define wavefront url and token\n",
    "\n",
    "#DO NOT CHANGE\n",
    "base_url = 'WAVEFRONT_ENDPOINT'\n",
    "\n",
    "api_key = 'WAVEFRONT_ACCESS_TOKEN'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "incident_query = 'avg(align(60s, mean, rate(ts(collectd.memory.memory-used, bu=cto and app=iam and env=prd and zone=f01 and location=las and pool=db))), name)'\n",
    "query_granularity = 'm'\n",
    "incidentStartTime =  convertDT(\"12/26/18 10:55\") \n",
    "start_time = incidentStartTime - 7*24*60*60*1000\n",
    "end_time = convertDT(\"12/26/18 10:55\")\n",
    "\n",
    "client = retrieveClient(base_url, api_key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Display incident graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "app = 'YOUR_APP_NAME' \n",
    "incident_df = executeQuery(app, incident_query, client, start_time, end_time,query_granularity) if incident_df is not None: showGraph(app+' status.errors incident', incident_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ts_test, adata_test,anomalies_test = detectAnomalies( test,mean_train, deviation_train,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plat_test = [date2num(d)  for d in ts_test]\n",
    "plt.figure(figsize=(15, 7))\n",
    "\n",
    "plt.plot_date(plat_train, train.y,color=\"blue\", linewidth=2.5, linestyle=\"-\", label='train')\n",
    "plt.plot_date(plat_test_origin, test.y,color=\"green\", linewidth=2.5, linestyle=\"-\", label='test')\n",
    "plt.plot_date(plat_test, adata_test,color=\"red\", linewidth=2.5, linestyle=\"-\", label='abnomalies')\n",
    "\n",
    "plt.title('Anomaly Data trend (train test splits 0.95)')\n",
    "plt.xlabel('time')\n",
    "plt.ylabel('value')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(ts_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from mlalgms.evaluator import ts_train_test_split\n",
    "from dateutil.parser import parse\n",
    "from mlalgms.statsmodel import calculateHistoricalParameters, detectAnomalies\n",
    "\n",
    "# Drawing libraries\n",
    "%matplotlib inline\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.dates import date2num\n",
    "from IPython.core.pylabtools import figsize\n",
    "\n",
    "df = incident_df\n",
    "train, test = ts_train_test_split(df, split_ratio=0.8)\n",
    "\n",
    "#scaler = MinMaxScaler()\n",
    "#train['y'] = scaler.fit_transform(train)\n",
    "#test['y'] = scaler.fit_transform(test)\n",
    "\n",
    "plat_train = [date2num(d)  for d in train.index.get_values()]\n",
    "plat_test_origin = [date2num(d)  for d in test.index.get_values()]\n",
    "\n",
    "mean_train, deviation_train = calculateHistoricalParameters(train)\n",
    "print(mean_train,\",\", deviation_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ts_test, adata_test,anomalies_test = detectAnomalies( test,mean_train, deviation_train,5)\n",
    "\n",
    "plat_test = [date2num(d)  for d in ts_test]\n",
    "plt.figure(figsize=(15, 7))\n",
    "\n",
    "plt.plot_date(plat_train, train.y,color=\"blue\", linewidth=2.5, linestyle=\"-\", label='train')\n",
    "plt.plot_date(plat_test_origin, test.y,color=\"green\", linewidth=2.5, linestyle=\"-\", label='test')\n",
    "plt.plot_date(plat_test, adata_test,color=\"red\", linewidth=2.5, linestyle=\"-\", label='abnomalies')\n",
    "\n",
    "plt.title('Anomaly Data trend (train test splits 0.95)')\n",
    "plt.xlabel('time')\n",
    "plt.ylabel('value')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
